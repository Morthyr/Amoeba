public int BestMove(int[,] board, int depth, int player, int alpha, int beta, CancellationToken token)
{
    int winner = CheckWinner(board);
    if (winner == 1) return int.MaxValue; // player wins
    else if (winner == -1) return int.MinValue; // opponent wins
    else if (winner == 2) return 0; // draw

    if (depth == 0 || token.IsCancellationRequested)
        return EvaluateBoard(board, player);

    int bestScore = player == 1 ? int.MinValue : int.MaxValue;
    int bestMove = -1;

    for (int i = 0; i < board.GetLength(0); i++)
    {
        for (int j = 0; j < board.GetLength(1); j++)
        {
            if (board[i, j] == 0)
            {
                board[i, j] = player;
                int score = BestMove(board, depth - 1, -player, alpha, beta, token);
                board[i, j] = 0;
                if (player == 1 && score > bestScore)
                {
                    bestScore = score;
                    bestMove = i;
                }
                else if (player == -1 && score < bestScore)
                {
                    bestScore = score;
                    bestMove = i;
                }
                if (player == 1) alpha = Math.Max(alpha, bestScore);
                else beta = Math.Min(beta, bestScore);
                if (beta <= alpha) break; // beta cutoff
            }
        }
        if (token.IsCancellationRequested) break;
    }

    if (bestMove == -1) bestMove = 0;
    return bestMove;
}

public int EvaluateBoard(int[,] board, int player)
{
    int score = 0;

    // Evaluate rows
    for (int i = 0; i < board.GetLength(0); i++)
    {
        for (int j = 0; j <= board.GetLength(1) - n; j++)
        {
            int count = 0;
            for (int k = 0; k < n; k++)
            {
                if (board[i, j + k] == player) count++;
                else if (board[i, j + k] == -player) count = 0;
            }
            score += count * count * count;
        }
    }

    // Evaluate columns
    for (int j = 0; j < board.GetLength(1); j++)
    {
        for (int i = 0; i <= board.GetLength(0) - n; i++)
        {
            int count = 0;
            for (int k = 0; k < n; k++)
            {
                if (board[i + k, j] == player) count++;
                else if (board[i + k, j] == -player) count = 0;
            }
            score += count * count * count;
        }
    }

    // Evaluate diagonals
    for (int i = 0; i <= board.GetLength(0) - n; i++)
    {
        for (int j = 0; j <= board.GetLength(1) - n; j++)
        {
            int count = 0;
            for (int k = 0; k < n; k++)
            {
                if (board[i + k, j + k] == player) count++;
                else if (board[i + k, j + k] == -player) count = 0;
            }
            score += count * count * count;
        }
    }

    for (int i = 0; i <= board.GetLength(0) - n; i++)
    {
        for (int j = n - 1; j < board.GetLength(1); j++)
        {
            int count = 0;
            for (int k = 0; k < n; k++)
            {
                if (board[i + k, j - k] == player) count++;
                else if (board[i + k, j - k] == -player) count = 0;
            }
            score += count * count * count;
        }
    }

    return score;
}


public int CheckWinner(int[,] board)
{
    // Check if there is a winner and return the player who won
}
