public static int EvaluateBoard(char[,] board, char playerMark, int seriesLength)
{
    int size = board.GetLength(0);
    int playerScore = 0;
    int opponentScore = 0;

    // Check unblocked rows
    for (int i = 0; i < size; i++)
    {
        int playerMarks = 0;
        int opponentMarks = 0;
        bool blocked = false;

        for (int j = 0; j < size; j++)
        {
            if (board[i, j] == playerMark)
            {
                playerMarks++;
                if (opponentMarks > 0)
                {
                    blocked = true;
                    break;
                }
            }
            else if (board[i, j] != '\0')
            {
                opponentMarks++;
                if (playerMarks < seriesLength)
                {
                    blocked = true;
                    break;
                }
            }
        }

        if (!blocked && playerMarks >= seriesLength)
        {
            playerScore++;
        }
        else if (!blocked && opponentMarks >= seriesLength)
        {
            opponentScore++;
        }
    }

    // Check unblocked columns
    for (int j = 0; j < size; j++)
    {
        int playerMarks = 0;
        int opponentMarks = 0;
        bool blocked = false;

        for (int i = 0; i < size; i++)
        {
            if (board[i, j] == playerMark)
            {
                playerMarks++;
                if (opponentMarks > 0)
                {
                    blocked = true;
                    break;
                }
            }
            else if (board[i, j] != '\0')
            {
                opponentMarks++;
                if (playerMarks < seriesLength)
                {
                    blocked = true;
                    break;
                }
            }
        }

        if (!blocked && playerMarks >= seriesLength)
        {
            playerScore++;
        }
        else if (!blocked && opponentMarks >= seriesLength)
        {
            opponentScore++;
        }
    }

    // Check unblocked diagonals
    for (int i = 0; i <= size - seriesLength; i++)
    {
        for (int j = 0; j <= size - seriesLength; j++)
        {
            int playerMarks = 0;
            int opponentMarks = 0;
            bool blocked = false;

            for (int k = 0; k < seriesLength; k++)
            {
                if (board[i + k, j + k] == playerMark)
                {
                    playerMarks++;
                    if (opponentMarks > 0)
                    {
                        blocked = true;
                        break;
                    }
                }
                else if (board[i + k, j + k] != '\0')
                {
                    opponentMarks++;
                    if (playerMarks < seriesLength)
                    {
                        blocked = true;
                        break;
                    }
                }
            }

            if (!blocked && playerMarks >= seriesLength)
            {
                playerScore++;
            }
            else if (!blocked && opponentMarks >= seriesLength)
            {
                opponentScore++;
            }

            playerMarks = 0;
            opponentMarks = 0;
            blocked = false;

            for (int k = 0; k < seriesLength; k++)
            {
                if (board[i + k, j + seriesLength - 1 - k] == playerMark)
                {
                    playerMarks++;
                    if (opponentMarks > 0)
                    {
                        blocked = true;
