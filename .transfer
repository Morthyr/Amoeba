public static int Minimax(int[,] board, int depth, int alpha, int beta, bool isMaximizingPlayer, CancellationToken token)
{
    int winner = CheckWinner(board);
    if (winner != 0)
    {
        return winner * depth;
    }
    if (depth == 0)
    {
        return 0;
    }

    int bestScore = isMaximizingPlayer ? int.MinValue : int.MaxValue;
    for (int i = 0; i < board.GetLength(0); i++)
    {
        for (int j = 0; j < board.GetLength(1); j++)
        {
            if (board[i, j] == 0)
            {
                int score = 0;
                if (isMaximizingPlayer)
                {
                    board[i, j] = 1;
                    score = Minimax(board, depth - 1, alpha, beta, false, token);
                    board[i, j] = 0;
                    bestScore = Math.Max(bestScore, score);
                    alpha = Math.Max(alpha, score);
                }
                else
                {
                    board[i, j] = -1;
                    score = Minimax(board, depth - 1, alpha, beta, true, token);
                    board[i, j] = 0;
                    bestScore = Math.Min(bestScore, score);
                    beta = Math.Min(beta, score);
                }

                if (beta <= alpha)
                {
                    return bestScore;
                }

                if (token.IsCancellationRequested)
                {
                    // Complete the current layer before throwing OperationCanceledException
                    while (i < board.GetLength(0) && j < board.GetLength(1))
                    {
                        j++;
                        if (j >= board.GetLength(1))
                        {
                            i++;
                            j = 0;
                        }
                        if (board[i, j] == 0)
                        {
                            throw new OperationCanceledException();
                        }
                    }
                }
            }
        }
    }

    return bestScore;
}
